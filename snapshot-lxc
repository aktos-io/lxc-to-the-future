#!/bin/bash
set -eu -o pipefail
safe_source () { [[ ! -z ${1:-} ]] && source $1; _dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; _sdir=$(dirname "$(readlink -f "$0")"); }; safe_source


safe_source $_sdir/dcs-tools/aktos-bash-lib/all.sh

# show help
show_help(){
    cat <<HELP

    Usage:

    	$(basename $0) ...options


    Options

        --src /path/to/subvolume      : Subvolume source
        --name your-container-name    : Container name

        --delete your-container-name  : Delete the container
        --keep-ssh-keys               : Do not regenerate SSH keys
        --config-network              : Configure network after creation

HELP
    exit
}

die(){
    echo_red "$1"
    show_help
    exit 1
}

new_keys=true
NAME=
SUBVOL=
delete_vm=false
config_network=false

# Parse command line arguments
args=("$@")
_count=1
while :; do
    key="${1:-}"
    case $key in
        -h|-\?|--help|'')
            show_help    # Display a usage synopsis.
            exit
            ;;
        # --------------------------------------------------------
        --name) shift
            if [[ ! -z ${1:-} ]]; then
                NAME=$1
                shift
            fi
            ;;

        --src) shift
            if [[ ! -z ${1:-} ]]; then
                SUBVOL=$1
                shift
            fi
            ;;
        --keep-ssh-keys) shift
            new_keys=false
            ;;
        --config-network) shift
            config_network=true
            ;;
        --delete) shift
            delete_vm=true
            if [[ ! -z ${1:-} ]]; then
                NAME=$1
                shift
            fi
            ;;
        # --------------------------------------------------------
        -*) # Handle unrecognized options
            echo
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)  # generate the positional arguments
            declare _arg$((_count++))="$1"
            shift
    esac
    [[ -z ${1:-} ]] && break
done; set -- "${args[@]}"
# use $_arg1 in place of $1, $_arg2 in place of $2 and so on, "$@" is intact

# Check parameters
[[ -z $NAME ]] && die "Name of VM is required."
[[ $delete_vm = false ]] && [[ -z $SUBVOL ]] && die "Source BTRFS subvolume is required"

# All checks are done, run as root.
[[ $(whoami) = "root" ]] || { sudo $0 "$@"; exit 0; }

GUEST_ROOT="/var/lib/lxc/$NAME/rootfs"

if [[ $delete_vm = true ]]; then
	read -p "Press enter to stop and delete LXC container: $NAME"
    set +e
    lxc-stop -n $NAME
	btrfs sub delete $GUEST_ROOT
	rm -r $(dirname $GUEST_ROOT)
    echo_green "Removed $NAME"
	exit
fi

START_TIME=$SECONDS

echo "creating the container directory: $NAME"
mkdir $(dirname $GUEST_ROOT)

echo "creating a writable snapshot of given subvolume"
btrfs sub snap $SUBVOL $GUEST_ROOT

_param=
[[ $new_keys = false ]] && _param="--skip-ssh-keys"

$_sdir/dcs-tools/give-new-id \
    --hostname $NAME \
    --root-dir $GUEST_ROOT \
    $_param

echo "emptying the /etc/fstab file"
mv $GUEST_ROOT/etc/fstab $GUEST_ROOT/etc/fstab.real
touch $GUEST_ROOT/etc/fstab

echo "remove the LXC specific entry from GUEST/etc/network/interfaces file"
IFACE_FILE=$GUEST_ROOT/etc/network/interfaces
mv $IFACE_FILE $IFACE_FILE.real

awk '/lxc-bridge/ {do_print=0}
     do_print==1 {print}
     NF==0 {do_print=1}' $IFACE_FILE.real > $IFACE_FILE


echo "creating the config file"
cat <<CONFIG > $(dirname $GUEST_ROOT)/config

# Template used to create this container: /usr/share/lxc/templates/lxc-download
# Parameters passed to the template:
# Template script checksum (SHA-1): 740c51206e35463362b735e68b867876048a8baf
# For additional config options, please look at lxc.container.conf(5)

# Uncomment the following line to support nesting containers:
#lxc.include = /usr/share/lxc/config/nesting.conf
# (Be aware this has security implications)


# Distribution configuration
lxc.include = /usr/share/lxc/config/debian.common.conf
lxc.arch = $(uname -m)

# Container specific configuration
lxc.rootfs = /var/lib/lxc/$NAME/rootfs
lxc.rootfs.backend = dir
lxc.utsname = $NAME

# Network configuration
lxc.network.type = veth
lxc.network.link = lxc-bridge
lxc.network.flags = up
#lxc.network.ipv4 = 10.0.8.8
#lxc.network.ipv4.gateway = 10.0.8.1

# External mounts
#lxc.mount.entry=/path/in/host/mount_point mount_point_in_container none bind 0 0

CONFIG

echo_green "done in $(($SECONDS - $START_TIME)) seconds..."

cat <<USAGE

to run the vm:

	sudo lxc-start -n $NAME

to attach the root console:

	sudo lxc-attach -n $NAME

to run GUI applications, make SSH with X forwarding:

    ssh -X youruser@container-ip

---------------------------------------------------
                  NOTE:

* Configure network in /var/lib/lxc/$NAME/config

---------------------------------------------------
USAGE

# Open configuration file
[[ $config_network = true ]] && nano /var/lib/lxc/$NAME/config
